import hashlib
import datetime
import json

import blockchain as blockchain
import requests
from typing import List

import self as self


class Transaction:
    def __init__(self, sender: str, receiver: str, amount: float):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount


class Block:
    def __init__(self, previous_hash, transactions, timestamp, nonce, shard_id):
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = timestamp
        self.nonce = nonce
        self.shard_id = shard_id
        self.hash = self.get_hash()

    @staticmethod
    def create_genesis_block():
        return Block("0", [], datetime.datetime.now(), 0, 0)

    def get_hash(self):
        transaction_data = "".join([str(tx.sender) + str(tx.receiver) + str(tx.amount) for tx in self.transactions])
        header_bin = (str(self.previous_hash) +
                      transaction_data +
                      str(self.timestamp) +
                      str(self.nonce) +
                      str(self.shard_id)).encode()

        inner_hash = hashlib.sha256(header_bin).hexdigest().encode()
        outer_hash = hashlib.sha256(inner_hash).hexdigest()
        return outer_hash

    def mine_block(self, difficulty):
        """
        Implement the Hashcash algorithm
        """
        target = ''.join(['0' for _ in range(difficulty)])
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.get_hash()
        print(f'Block mined: {self.hash}')


class Blockchain:
    def __init__(self):
        self.chain = [Block.create_genesis_block()]
        self.difficulty = 2
        self.transactions = []
        self.nodes = set()
        self.shards = {}
        self.access_control = {}
        self.node_id = self.get_node_id()

    def register_node(self, node_url: str) -> None:
        """
        Register a new node in the network
        """
        self.nodes.add(node_url)
        self.sync_chain()

    def sync_chain(self) -> None:
        """
        Synchronize the chain with other nodes in the network
        """
        longest_chain = None
        max_length = len(self.chain)


def sync_chain(self) -> None:
    # """
    # Synchronize the chain with other nodes in the network
    # """
    longest_chain = None
    max_length = len(self.chain)
    for node_url in self.nodes:
        response = requests.get(f'{node_url}/get_chain')
        if response.status_code == 200:
            length = response.json()['length']
            chain = response.json()['chain']
            if length > max_length and self.is_chain_valid(chain):
                max_length = length
                longest_chain = chain
    if longest_chain:
        self.chain = longest_chain
        return True
    return False


def broadcast_transaction(self, transaction: dict) -> None:
    """
    Broadcast a new transaction to other nodes in the network
    """
    for node_url in self.nodes:
        requests.post(f'{node_url}/add_transaction', json=transaction)


def broadcast_block(self, block: dict) -> None:
    """
    Broadcast a new block to other nodes in the network
    """
    for node_url in self.nodes:
        requests.post(f'{node_url}/add_block', json=block)


def add_block(self, transactions: List[Transaction]) -> None:
    """
    Add a new block to the chain
    """
    self.transactions.extend(transactions)
    shard_id = self.get_shard_id(self.transactions)
    if shard_id not in self.shards:
        self.shards[shard_id] = [Block.create_genesis_block()]
    previous_hash = self.shards[shard_id][-1].hash
    timestamp = datetime.datetime.now()
    new_block = Block(previous_hash, self.transactions, timestamp, 0, shard_id)
    new_block.mine_block(self.difficulty)
    self.transactions = []
    self.shards[shard_id].append(new_block)
    self.broadcast_block(new_block.__dict__)


def is_chain_valid(self, chain=None) -> bool:
    """
    Check if the chain is valid by iterating through the chain
    and comparing the previous_hash of each block with the hash of the previous block
    """
    if chain is None:
        chain = self.chain
    for shard_id in self.shards:
        for i in range(1, len(self.shards[shard_id])):
            current_block = self.shards[shard_id][i]
            previous_block = self.shards[shard_id][i - 1]
            if current_block.hash != current_block.get_hash():
                return False
            if previous_block.hash != current_block.previous_hash:
                return False
    return True


def get_shard_id(self, transactions: List[Transaction]) -> int:
    """
    Assign a shard id to the transactions based on a specific criteria
    """
    # Example implementation: Assign shard id based on the first letter of the sender's address
    return ord(transactions[0].sender[0]) % len(self.nodes)


def add_access_control(self, node_url: str, shard_id: int) -> None:
    """
    Add a node to the access control list for a specific shard
    """
    if shard_id not in self.access_control:
        self.access_control[shard_id] = []
    self.access_control[shard_id].append(node_url)


def can_access(self, node_url: str, shard_id: int) -> bool:
    """
    Check if a node is allowed to access a specific shard
    """
    if shard_id not in self.access_control:
        return False
    return node_url in self.access_control[shard_id]


def get_node_id(self) -> str:
    """
    Get a unique id for the node
    """
    # Example implementation: Use the first 8 characters of the node's public IP
    return requests.get('https://api.ipify.org').text[:8]

    # Initialize the blockchain
    blockchain = Blockchain()

    # Register nodes in the network
    blockchain.register_node("http://node1.com")
    blockchain.register_node("http://node2.com")
    blockchain.register_node("http://node3.com")

    # Add access control for nodes to specific shards
    blockchain.add_access_control("http://node1.com", 0)
    blockchain.add_access_control("http://node2.com", 1)
    blockchain.add_access_control("http://node3.com", 2)


# Example transactions
transactions = [Transaction("Alice", "Bob", 0.5), Transaction("Charlie", "David", 1.0)]

# Example access check
# print(blockchain.can_access("http://node1.com", 0))  # True
# print(blockchain.can_access("http://node1.com", 1))  # False

# Add the transactions to the blockchain
# blockchain.add_block(transactions)

# Check if the chain is valid
#print(blockchain.is_chain_valid())  # True


                       DJANGO
..............................................................
from django.db import models

class Block(models.Model):
    previous_hash = models.CharField(max_length=64)
    land_data = models.TextField()
    timestamp = models.DateTimeField()
    nonce = models.IntegerField()
    shard_id = models.IntegerField()

In the blockchain app, create a forms.py file and define a BlockForm class that will be used to create new blocks.

from django import forms
from .models import Block

class BlockForm(forms.ModelForm):
    class Meta:
        model = Block
        fields = ['land_data', 'shard_id']

Create a views.py file in the blockchain app and define a BlockCreateView class that will handle the creation of new blocks.

from django.shortcuts import render
from django.views.generic import CreateView
from .forms import BlockForm

class BlockCreateView(CreateView):
    form_class = BlockForm
    template_name = 'blockchain/create_block.html'
    success_url = '/'

    def form_valid(self, form):
        form.instance.previous_hash = self.get_previous_hash()
        form.instance.timestamp = datetime.datetime.now()
        form.instance.nonce = 0
        form.instance.mine_block(self.difficulty)
        return super().form_valid(form)

    def get_previous_hash(self):
        # code to get previous hash

Create a urls.py file in the blockchain app and define a URL pattern for the BlockCreateView.

from django.urls import path
from .views import BlockCreateView

urlpatterns = [
    path('create_block/', BlockCreateView.as_view(), name='create_block'),
]


In the project's urls.py file, include the URL patterns of the blockchain app.

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('blockchain/', include('blockchain.urls')),
]

Create_block.html in the templates/blockchain folder and use the BlockForm to render a form for creating new blocks:


{% extends 'base.html' %}

{% block content %}
  <h2>Create a new Block</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Create">
  </form>
{% endblock %}


In the Block model, add a mine_block method that will be used to mine new blocks.

import hashlib

class Block(models.Model):
    previous_hash = models.CharField(max_length=64)
    land_data = models.TextField()
    timestamp = models.DateTimeField()
    nonce = models.IntegerField()
    shard_id = models.IntegerField()

    def mine_block(self, difficulty):
        """
        Mines a new block by incrementing the nonce until the hash of the block
        starts with a certain number of 0s (difficulty)
        """
        target = "0" * difficulty
        while self.get_hash()[:difficulty] != target:
            self.nonce += 1

    def get_hash(self):
        """
        Returns the SHA-256 hash of the block
        """
        header_bin = (str(self.previous_hash) +
                      str(self.land_data) +
                      str(self.timestamp) +
                      str(self.nonce) +
                      str(self.shard_id)).encode()

        inner_hash = hashlib.sha256(header_bin).hexdigest().encode()
        outer_hash = hashlib.sha256(inner_hash).hexdigest()
        return outer_hash
Finally, run the development server using the command python manage.py runserver and navigate to http://localhost:8000/blockchain/create_block/ to create new blocks.

